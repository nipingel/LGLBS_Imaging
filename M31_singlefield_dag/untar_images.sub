# untar_images.sub
# script to untar tarballs containing the imaging products from individusl LGLBS spectral channnels
#
# Specify the HTCondor Universe (vanilla is the default and is used
#  for almost all jobs) and your desired name of the HTCondor log file,
#  which is where HTCondor will describe what steps it takes to run 
#  your job. Wherever you see $(Cluster), HTCondor will insert the 
#  queue number assigned to this set of jobs at the time of submission.
universe = docker
docker_image = nipingel/casa:latest

#
# Specify your executable (single binary or a script that runs several
#  commands), arguments, and a files for HTCondor to store standard
#  output (or "screen output").
#  $(Process) will be a integer number for each job, starting with "0"
#  and increasing for the relevant number of jobs.

executable = untar_images.sh

## determine channel to untar
sc = $(Process)+2210
chan = $INT(sc,%d)

## suffix=image.pbcor
## src_name=M31
## root_file_name_1=M31_field14.comb_spw.wt
## root_file_name_2=M31_field47.comb_spw.wt

arguments = $(suffix) $(src_name) $(chan) $(root_file_name_1) $(root_file_name_2)
output = decompress_images_$(Process).out
error = decompress_images_$(Process).err
log = decompress_images_$(Process).log

# Specify that HTCondor should transfer files to and from the
#  computer where each job runs. The last of these lines *would* be
#  used if there were any other files needed for the executable to use.
Requirements=(Target.HasCHTCStaging == true)
+HasCHTCStaging=true

# Tell HTCondor what amount of compute resources
#  each job will need on the computer where it runs.
transfer_input_files = untar_images.sh, export_fits.py
request_cpus = 1
request_memory = 1GB
request_disk = 10GB

# Tell HTCondor to run 475 instances of our job:
queue 800
